@model HiveData.Models.UserProfile
@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "Edit Profile";
}

<div class="container">
    <div class="row profile">
        <div class="col-md-3">
            <div class="album-sidebar">

                <div class="profile-usermenu">
                    <ul class="nav">
                        <li class="active">
                            <a href="@Url.Action("Index", "Profile")">
                                <i class="glyphicon glyphicon-arrow-left"></i>
                                Go back
                            </a>
                        </li>
                        <li>
                            <a href="@Url.Action("Edit", "Profile")">
                                <i class="glyphicon glyphicon-globe"></i>
                                Edit Profile
                            </a>
                        </li>
                        <li>
                            <a href="@Url.Action("Index", "Manage")">
                                <i class="glyphicon glyphicon-cog"></i>
                                Manage Account
                            </a>
                        </li>
                        <li>
                            <a href="@Url.Action("DeleteAccount", "Account", new { userId = User.Identity.GetUserId() })" onclick="return confirm('Are you sure you want to leave Cinehive?')">
                                <i class="glyphicon glyphicon-remove"></i>
                                Delete Account
                            </a>
                        </li>
                    </ul>
                </div>
            </div>

        </div>

        <div class="col-md-9">
            <div class="profile-content-edit">

                @using (Html.BeginForm("Edit", "Profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()

                <div class="form-horizontal">
                        <h4>Edit Profile</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.ProfileId)

                        <div class="form-group">
                            @Html.LabelFor(model => model.Firstname,"First name" ,htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Firstname, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Lastname, "Last name",htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Lastname, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <input type="radio" name="Gender" value="Male"> Male<br>
                                <input type="radio" name="Gender" value="Female"> Female<br>
                                <input type="radio" name="Gender" value="Other"> Other
                                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                <div class="form-inline">
                                    Current Gender: @Html.DisplayFor(model => model.Gender)
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <input type="date" id="DateOfBirth" name="DateOfBirth">
                                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                                <div class="form-inline">
                                    Current Date of Birth: @Html.DisplayFor(model => model.DateOfBirth)
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AboutMe, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.AboutMe, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AboutMe, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ProfilePicture, "Profile picture",htmlAttributes: new { @class = "control-label col-md-2 profile-pic-label" })
                            <div class="col-md-10 change-profile-pic">
                                @Html.ActionLink("Change your profile picture in your album", "Index", "Album")
                            </div>
                        </div>

                        <div class="form-group">
                        @Html.LabelFor(model => model.Privacy, "Profile privacy level",htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col">
                            <input type="radio" name="Privacy" value=1> Everyone can see<br/>
                            <input type="radio" name="Privacy" value=2> Friends Only<br/>
                            <input type="radio" name="Privacy" value=3> Only me<br/>
                        </div>
                    </div>

                    @*####### Checkbox genres form: ###############*@
                    <div class="form-group">
                        <b>Pick your favourite film genres (max 5):</b><br />  
                            @for (int i = 0; i < Model.Genres.Count; i++)
                            {
                                <span class="genres-checkboxLabel">
                                @Html.LabelFor(m => m.Genres[i].Selected, Model.Genres[i].Text)
                                @Html.HiddenFor(m => m.Genres[i].Value)
                                @Html.CheckBoxFor(m => m.Genres[i].Selected, new { @class = "genres-checkbox" })
                                </span>
                                if ((i+1) % 4 == 0 && (i+1) > 1)
                                {
                                    <br />
                                }                               
                                                                
                            }
                    </div>
                </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>
               
                }
            </div>
</div>
</div>
</div>
<script>
    // Limits genre selection to max 5

        var checkBoxGroup = document.querySelectorAll(".genres-checkbox");
        var limit = 5;
        for (var i = 0; i < checkBoxGroup.length; i++) {
            checkBoxGroup[i].onclick = function () {
                var checkedcount = 0;
                for (var i = 0; i < checkBoxGroup.length; i++) {
                    checkedcount += (checkBoxGroup[i].checked) ? 1 : 0;
                }
                if (checkedcount > limit) {
                    alert("You can select maximum of " + limit + " checkboxes.");
                    this.checked = false;
                }
            }
        }
   
</script>